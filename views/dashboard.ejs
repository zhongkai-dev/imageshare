<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm fixed-top">
  <div class="container">
    <a class="navbar-brand" href="#">Image Share</a>
    <div class="ms-auto">
      <span class="badge bg-primary me-2">User ID: <%= userId %></span>
      <a href="/auth/logout" class="btn btn-outline-danger btn-sm">Logout</a>
    </div>
  </div>
</nav>

<div class="chat-container">
  <!-- Chat area -->
  <div class="chat-area" id="chatArea">
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger" role="alert">
        <%= error %>
      </div>
    <% } %>
    
    <% if (groupedFiles && groupedFiles.length > 0) { %>
      <% groupedFiles.forEach(group => { %>
        <div class="message-container">
          <div class="message">
            <div class="message-header">
              <strong><%= userId %></strong>
              <small class="text-muted"><%= new Date(group.date).toLocaleString() %></small>
              <div class="message-actions-header">
                <!-- Delete bubble button -->
                <form action="/files/delete-group/<%= group.groupId %>" method="POST" class="d-inline delete-message-form">
                  <button type="submit" class="btn-delete-message" title="Delete message" onclick="return confirm('Delete this entire message?')">
                    <i class="fas fa-trash-alt"></i>
                  </button>
                </form>
              </div>
            </div>
            <div class="message-content">
              <!-- If there's a text message, show it first -->
              <% if (group.messages && group.messages.length > 0) { %>
                <% group.messages.forEach(message => { %>
                  <div class="text-message mb-3">
                    <div class="message-text-content"><%= message.text %></div>
                    <div class="message-text-actions">
                      <button class="btn-copy-message" onclick="copyMessageText(this)" title="Copy message">
                        <i class="fas fa-copy"></i>
                      </button>
                    </div>
                  </div>
                <% }); %>
              <% } %>
              
              <!-- If group contains multiple images, show them in a grid -->
              <% if (group.files.length > 1 && group.files.every(file => file.mimetype.startsWith('image/'))) { %>
                <div class="image-grid <%= group.files.length > 4 ? 'grid-many' : group.files.length > 2 ? 'grid-' + group.files.length : '' %>">
                  <% group.files.forEach(file => { %>
                    <div class="image-grid-item">
                      <img src="/files/view/<%= file._id %>" alt="<%= file.originalName %>" 
                          class="img-thumbnail chat-img" 
                          onclick="openImagePreview('/files/view/<%= file._id %>', '<%= file.originalName %>')">
                    </div>
                  <% }); %>
                </div>
                <div class="file-info mt-2">
                  <span><%= group.files.length %> images</span>
                </div>
              <!-- If single image, show normally -->
              <% } else if (group.files.length === 1 && group.files[0].mimetype.startsWith('image/')) { %>
                <div class="image-preview">
                  <img src="/files/view/<%= group.files[0]._id %>" alt="<%= group.files[0].originalName %>" 
                      class="img-thumbnail chat-img" 
                      onclick="openImagePreview('/files/view/<%= group.files[0]._id %>', '<%= group.files[0].originalName %>')">
                  <div class="file-info">
                    <span><%= group.files[0].originalName %></span>
                    <small><%= (group.files[0].size / 1024).toFixed(2) %> KB</small>
                  </div>
                </div>
              <% } %>
              
              <!-- Group-level actions for image groups -->
              <% if (group.files.length > 1 && group.files.every(file => file.mimetype.startsWith('image/'))) { %>
                <div class="message-actions mt-2">
                  <div class="btn-group">
                    <button class="btn btn-sm btn-outline-primary" onclick="downloadAllFiles('<%= JSON.stringify(group.files.map(f => f._id)) %>')">
                      <i class="fas fa-download"></i> Download All
                    </button>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="empty-state">
        <i class="fas fa-comment-alt fa-4x text-muted mb-3"></i>
        <h5 class="text-muted">No messages yet</h5>
        <p>Start a conversation by sending a message or image below.</p>
      </div>
    <% } %>
    
    <!-- Spacer to ensure last message isn't covered by the upload form -->
    <div style="height: 80px;"></div>
  </div>
  
  <!-- Chat input form -->
  <div class="chat-input-form">
    <form action="/files/upload-images" method="post" enctype="multipart/form-data" id="chatForm">
      <div class="input-wrapper">
        <div class="message-input-container">
          <input type="text" class="form-control message-input" name="message" placeholder="Type a message..." autocomplete="off">
          <div class="input-actions">
            <label for="imageInput" class="btn-attach" title="Attach images">
              <i class="fas fa-image"></i>
            </label>
            <input type="file" id="imageInput" name="images" multiple accept="image/*" style="display: none;" onchange="updateFileLabel()">
            <span id="fileCount" class="file-count"></span>
          </div>
        </div>
        <button type="submit" class="btn btn-primary send-button">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Image Preview Modal -->
<div class="image-preview-overlay" id="imagePreviewOverlay" onclick="closeImagePreview()">
  <div class="image-preview-container">
    <div class="image-preview-header">
      <span id="previewImageName"></span>
      <button class="close-btn" onclick="closeImagePreview()">Ã—</button>
    </div>
    <img id="previewImage" class="preview-image" src="" alt="Preview">
  </div>
</div>

<script>
  // Scroll to bottom of chat on load
  window.onload = function() {
    const chatArea = document.getElementById('chatArea');
    chatArea.scrollTop = chatArea.scrollHeight;
    
    // Add submit handlers to show loading indicators
    document.getElementById('chatForm').addEventListener('submit', function() {
      const btn = this.querySelector('button[type="submit"]');
      btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
      btn.disabled = true;
    });
  };
  
  // Update file label when files are selected
  function updateFileLabel() {
    const input = document.getElementById('imageInput');
    const fileCount = document.getElementById('fileCount');
    
    if (input.files.length > 0) {
      fileCount.textContent = input.files.length + (input.files.length === 1 ? ' image' : ' images');
      fileCount.style.display = 'inline-block';
    } else {
      fileCount.style.display = 'none';
    }
  }
  
  // Copy message text to clipboard
  function copyMessageText(button) {
    const messageText = button.closest('.text-message').querySelector('.message-text-content').textContent;
    navigator.clipboard.writeText(messageText).then(() => {
      // Show a brief "Copied!" tooltip
      const originalTitle = button.getAttribute('title');
      button.setAttribute('title', 'Copied!');
      button.classList.add('copied');
      
      setTimeout(() => {
        button.setAttribute('title', originalTitle);
        button.classList.remove('copied');
      }, 1500);
    });
  }
  
  // Image preview functionality
  function openImagePreview(src, name) {
    document.getElementById('previewImage').src = src;
    document.getElementById('previewImageName').innerText = name;
    document.getElementById('imagePreviewOverlay').style.display = 'flex';
    document.body.style.overflow = 'hidden';
    event.stopPropagation();
  }
  
  function closeImagePreview() {
    document.getElementById('imagePreviewOverlay').style.display = 'none';
    document.body.style.overflow = 'auto';
  }
  
  // Helper function for file icons
  function getFileIcon(mimetype) {
    if (mimetype.startsWith('image/')) return 'fa-file-image text-primary';
    if (mimetype === 'application/pdf') return 'fa-file-pdf text-danger';
    if (mimetype.includes('document') || mimetype.includes('word')) return 'fa-file-word text-primary';
    if (mimetype.includes('spreadsheet') || mimetype.includes('excel')) return 'fa-file-excel text-success';
    if (mimetype.includes('audio')) return 'fa-file-audio text-warning';
    if (mimetype.includes('video')) return 'fa-file-video text-danger';
    if (mimetype.includes('zip') || mimetype.includes('compressed')) return 'fa-file-archive text-warning';
    if (mimetype.includes('text/')) return 'fa-file-alt text-info';
    return 'fa-file text-secondary';
  }
  
  // Download all files in a group
  function downloadAllFiles(fileIds) {
    try {
      const ids = JSON.parse(fileIds);
      ids.forEach((id, index) => {
        // Slight delay between downloads to avoid browser blocking
        setTimeout(() => {
          window.open('/files/download/' + id, '_blank');
        }, index * 300);
      });
    } catch (e) {
      console.error('Error downloading files:', e);
    }
  }

  // Image preview functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Handle image clicks for preview
    document.querySelectorAll('.chat-img, .image-grid-item img').forEach(img => {
      img.addEventListener('click', function() {
        const overlay = document.getElementById('imagePreviewOverlay');
        const previewImage = document.getElementById('previewImage');
        const imageTitle = document.getElementById('imageTitle');
        
        previewImage.src = this.src;
        imageTitle.textContent = this.alt || 'Image Preview';
        overlay.style.display = 'flex';
      });
    });
    
    // Close preview on button click
    document.getElementById('closePreview').addEventListener('click', function() {
      document.getElementById('imagePreviewOverlay').style.display = 'none';
    });
    
    // Close preview on overlay click
    document.getElementById('imagePreviewOverlay').addEventListener('click', function(e) {
      if (e.target === this) {
        this.style.display = 'none';
      }
    });
    
    // Handle PWA install prompt for iOS
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isInStandaloneMode = window.matchMedia('(display-mode: standalone)').matches;
    
    if (isIOS && !isInStandaloneMode) {
      document.getElementById('iosInstallMessage').style.display = 'block';
    }
  });
</script> 